import{_ as s,c as a,o as n,a as l}from"./app.64e01693.js";const o="/assets/2023-04-04-09-41-59.0aea2c15.png",g=JSON.parse('{"title":"渲染机制","description":"","frontmatter":{},"headers":[{"level":2,"title":"虚拟 DOM","slug":"虚拟-dom","link":"#虚拟-dom","children":[]},{"level":2,"title":"渲染管线","slug":"渲染管线","link":"#渲染管线","children":[]},{"level":2,"title":"模板 vs. 渲染函数","slug":"模板-vs-渲染函数","link":"#模板-vs-渲染函数","children":[]},{"level":2,"title":"React在虚拟DOM上的缺点 （虚拟 DOM 最受诟病）","slug":"react在虚拟dom上的缺点-虚拟-dom-最受诟病","link":"#react在虚拟dom上的缺点-虚拟-dom-最受诟病","children":[]},{"level":2,"title":"Vue3 编译器用来提高虚拟 DOM 运行时性能的主要优化","slug":"vue3-编译器用来提高虚拟-dom-运行时性能的主要优化","link":"#vue3-编译器用来提高虚拟-dom-运行时性能的主要优化","children":[{"level":3,"title":"静态提升 例子","slug":"静态提升-例子","link":"#静态提升-例子","children":[]},{"level":3,"title":"更新类型标记 例子","slug":"更新类型标记-例子","link":"#更新类型标记-例子","children":[]},{"level":3,"title":"树结构打平","slug":"树结构打平","link":"#树结构打平","children":[]}]},{"level":2,"title":"对 SSR 激活的影响","slug":"对-ssr-激活的影响","link":"#对-ssr-激活的影响","children":[]}],"relativePath":"articles/vue/rendering-mechanism.md"}'),p={name:"articles/vue/rendering-mechanism.md"},e=l(`<h1 id="渲染机制" tabindex="-1">渲染机制 <a class="header-anchor" href="#渲染机制" aria-hidden="true">#</a></h1><h2 id="虚拟-dom" tabindex="-1">虚拟 DOM <a class="header-anchor" href="#虚拟-dom" aria-hidden="true">#</a></h2><p>虚拟 DOM (Virtual DOM，简称 VDOM) 是一种编程概念，意为将目标所需的 UI 通过数据结构“虚拟”地表示出来，保存在内存中，然后将真实的 DOM 与之保持同步。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> vnode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">children</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">/* 更多 vnode */</span></span>
<span class="line"><span style="color:#A6ACCD;">        ]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>vnode 即一个纯 JavaScript 的对象 (一个“虚拟节点”)，它代表着一个 <code>&lt;div&gt;</code> 元素。它包含我们创建实际元素所需的所有信息。它还包含更多的子节点，这使它成为虚拟 DOM 树的根节点。</p><p>一个运行时渲染器将会遍历整个虚拟 DOM 树，并据此构建真实的 DOM 树。这个过程被称为<strong>挂载 (mount)</strong>。</p><p>如果我们有两份虚拟 DOM 树，渲染器将会有比较地遍历它们，找出它们之间的区别，并应用这其中的变化到真实的 DOM 上。这个过程被称为<strong>更新 (patch)</strong>(又被称为“比对”(diffing) 或“协调”(reconciliation))</p><p>虚拟 DOM 带来的主要收益是它让开发者能够灵活、声明式地创建、检查和组合所需 UI 的结构，同时只需把具体的 DOM 操作留给渲染器去处理。</p><h2 id="渲染管线" tabindex="-1">渲染管线 <a class="header-anchor" href="#渲染管线" aria-hidden="true">#</a></h2><ol><li><strong>编译</strong>：Vue 模板被编译为<strong>渲染函数</strong>：即用来返回虚拟 DOM 树的函数。这一步骤可以通过构建步骤提前完成，也可以通过使用运行时编译器即时完成。</li><li><strong>挂载</strong>：运行时渲染器调用渲染函数，遍历返回的虚拟 DOM 树，并基于它创建实际的 DOM 节点。这一步会作为响应式副作用执行，因此它会追踪其中所用到的所有响应式依赖。</li><li><strong>更新</strong>：当一个依赖发生变化后，副作用会重新运行，这时候会创建一个更新后的虚拟 DOM 树。运行时渲染器遍历这棵新树，将它与旧树进行比较，然后将必要的更新应用到真实 DOM 上去。 <img src="`+o+`" alt=""></li></ol><h2 id="模板-vs-渲染函数" tabindex="-1">模板 vs. 渲染函数 <a class="header-anchor" href="#模板-vs-渲染函数" aria-hidden="true">#</a></h2><p>Vue 模板会被预编译成虚拟 DOM 渲染函数; <strong>处理高度动态的逻辑时，渲染函数相比于模板更加灵活</strong></p><p>为什么 Vue 默认推荐使用模板呢？有以下几点原因：</p><ol><li><strong>模板更贴近实际的 HTML</strong>。这使得我们能够<strong>更方便地重用一些已有的 HTML 代码片段</strong>，能够带来<strong>更好的可访问性体验</strong>、能<strong>更方便地使用 CSS 应用样式</strong>，并且<strong>更容易使设计师理解和修改</strong>。</li><li><strong>由于其确定的语法，更容易对模板做静态分析</strong>。这使得 Vue 的模板编译器能够应用许多编译时优化来提升虚拟 DOM 的性能表现</li></ol><h2 id="react在虚拟dom上的缺点-虚拟-dom-最受诟病" tabindex="-1">React在虚拟DOM上的缺点 （虚拟 DOM 最受诟病） <a class="header-anchor" href="#react在虚拟dom上的缺点-虚拟-dom-最受诟病" aria-hidden="true">#</a></h2><p>需要遍历整棵虚拟 DOM 树、比较每个 vnode 上 props 的区别来确保正确性。即使一棵树的某个部分从未改变，还是会在每次重渲染时创建新的 vnode，带来了大量不必要的内存压力。虚拟 DOM 最受诟病： 这种有点暴力的更新过程通过牺牲效率来换取声明式的写法和最终的正确性。</p><h2 id="vue3-编译器用来提高虚拟-dom-运行时性能的主要优化" tabindex="-1">Vue3 编译器用来提高虚拟 DOM 运行时性能的主要优化 <a class="header-anchor" href="#vue3-编译器用来提高虚拟-dom-运行时性能的主要优化" aria-hidden="true">#</a></h2><h3 id="静态提升-例子" tabindex="-1">静态提升 <a href="https://template-explorer.vuejs.org/#eyJzcmMiOiI8ZGl2PlxuICA8ZGl2PmZvbzwvZGl2PiA8IS0tIGhvaXN0ZWQgLS0+XG4gIDxkaXY+YmFyPC9kaXY+IDwhLS0gaG9pc3RlZCAtLT5cbiAgPGRpdj57eyBkeW5hbWljIH19PC9kaXY+XG48L2Rpdj5cbiIsIm9wdGlvbnMiOnsiaG9pc3RTdGF0aWMiOnRydWV9fQ==" target="_blank" rel="noreferrer">例子</a> <a class="header-anchor" href="#静态提升-例子" aria-hidden="true">#</a></h3><p>模板中有部分内容是<strong>不带任何动态绑定的</strong>，Vue 编译器自动地会<strong>提升这部分 vnode 创建函数到这个模板的渲染函数之外</strong>，并在每次渲染时都使用这份相同的 vnode，渲染器知道新旧 vnode 在这部分是完全相同的，所以会<strong>完全跳过对它们的差异比对</strong>。</p><p>当有<strong>足够多连续的静态元素时</strong>，它们还会再被<strong>压缩为一个“静态 vnode”</strong>，其中包含的是这些节点相应的纯 HTML 字符串。<a href="https://template-explorer.vuejs.org/#eyJzcmMiOiI8ZGl2PlxuICA8ZGl2IGNsYXNzPVwiZm9vXCI+Zm9vPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJmb29cIj5mb288L2Rpdj5cbiAgPGRpdiBjbGFzcz1cImZvb1wiPmZvbzwvZGl2PlxuICA8ZGl2IGNsYXNzPVwiZm9vXCI+Zm9vPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJmb29cIj5mb288L2Rpdj5cbiAgPGRpdj57eyBkeW5hbWljIH19PC9kaXY+XG48L2Rpdj4iLCJzc3IiOmZhbHNlLCJvcHRpb25zIjp7ImhvaXN0U3RhdGljIjp0cnVlfX0=" target="_blank" rel="noreferrer">例子</a>。 这些静态节点会直接通过 innerHTML 来挂载。同时还会在<strong>初次挂载后缓存相应的 DOM 节点</strong>。如果这部分内容在应用中其他地方<strong>被重用</strong>，那么将会<strong>使用原生的 cloneNode() 方法来克隆新的 DOM 节点</strong>，这会非常高效。</p><h3 id="更新类型标记-例子" tabindex="-1">更新类型标记 <a href="https://template-explorer.vuejs.org/#eyJzcmMiOiI8ZGl2IDpjbGFzcz1cInsgYWN0aXZlIH1cIj48L2Rpdj5cblxuPGlucHV0IDppZD1cImlkXCIgOnZhbHVlPVwidmFsdWVcIj5cblxuPGRpdj57eyBkeW5hbWljIH19PC9kaXY+Iiwib3B0aW9ucyI6e319" target="_blank" rel="noreferrer">例子</a> <a class="header-anchor" href="#更新类型标记-例子" aria-hidden="true">#</a></h3><p>Vue 在 vnode 创建调用中直接编码了每个元素所需的更新类型</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">createElementVNode</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">class</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_normalizeClass</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">active</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> _ctx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">active </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* CLASS */</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>参数<code>2</code>就是一个<strong>更新类型标记</strong> (patch flag)。<strong>一个元素可以有多个更新类型标记，会被合并成一个数字</strong>。 运行时渲染器也将会使用位运算来检查这些标记，确定相应的更新操作：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (vnode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">patchFlag </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> PatchFlags</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">CLASS </span><span style="color:#676E95;font-style:italic;">/* 2 */</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 更新节点的 CSS class</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="树结构打平" tabindex="-1">树结构打平 <a class="header-anchor" href="#树结构打平" aria-hidden="true">#</a></h3><p>内部结构是稳定的一个部分可被称之为一个<strong>区块</strong>。在这个用例中，整个模板只有一个区块，因为这里没有用到任何结构性指令 (比如 v-if 或者 v-for)。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">&lt;!-- root block --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">...</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;">&lt;!-- 不会追踪 --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">&lt;!-- 要追踪 --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;">&lt;!-- 不会追踪 --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ bar }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">&lt;!-- 要追踪 --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>编译的结果会被打平为一个数组，仅包含所有动态的后代节点：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    div (block root)</span></span>
<span class="line"><span style="color:#A6ACCD;">    - div 带有 :id 绑定</span></span>
<span class="line"><span style="color:#A6ACCD;">    - div 带有 {{ bar }} 绑定</span></span>
<span class="line"></span></code></pre></div><p>当这个组件需要重渲染时，只需要遍历这个打平的树而非整棵树。这也就是我们所说的<strong>树结构打平</strong>，<strong>这大大减少了我们在虚拟 DOM 协调时需要遍历的节点数量。模板中任何的静态部分都会被高效地略过</strong>。</p><p><code>v-if</code> 和 <code>v-for</code> 指令会创建新的区块节点：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">&lt;!-- 根区块 --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">&lt;!-- if 区块 --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            ...</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="对-ssr-激活的影响" tabindex="-1">对 SSR 激活的影响 <a class="header-anchor" href="#对-ssr-激活的影响" aria-hidden="true">#</a></h2><p>更新类型标记和树结构打平都大大提升了 Vue <a href="https://cn.vuejs.org/guide/scaling-up/ssr.html#client-hydration" target="_blank" rel="noreferrer">SSR 激活</a>的性能表现：</p><ul><li>单个元素的激活可以基于相应 vnode 的更新类型标记走更快的捷径。</li><li>在激活时只有区块节点和其动态子节点需要被遍历，这在模板层面上实现更高效的部分激活。</li></ul>`,36),t=[e];function r(c,i,D,y,d,F){return n(),a("div",null,t)}const A=s(p,[["render",r]]);export{g as __pageData,A as default};
