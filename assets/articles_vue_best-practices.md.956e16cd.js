import{_ as s,c as a,o as n,a as l}from"./app.64e01693.js";const F=JSON.parse('{"title":"最佳实践","description":"","frontmatter":{},"headers":[{"level":2,"title":"追踪运行时错误","slug":"追踪运行时错误","link":"#追踪运行时错误","children":[]},{"level":2,"title":"性能优化","slug":"性能优化","link":"#性能优化","children":[{"level":3,"title":"生产部署的负载性能分析","slug":"生产部署的负载性能分析","link":"#生产部署的负载性能分析","children":[]},{"level":3,"title":"包体积与 Tree-shaking 优化","slug":"包体积与-tree-shaking-优化","link":"#包体积与-tree-shaking-优化","children":[]},{"level":3,"title":"更新优化","slug":"更新优化","link":"#更新优化","children":[]},{"level":3,"title":"减少大型不可变数据的响应性开销","slug":"减少大型不可变数据的响应性开销","link":"#减少大型不可变数据的响应性开销","children":[]},{"level":3,"title":"避免不必要的组件抽象","slug":"避免不必要的组件抽象","link":"#避免不必要的组件抽象","children":[]}]},{"level":2,"title":"安全","slug":"安全","link":"#安全","children":[{"level":3,"title":"首要规则：不要使用无法信赖的模板","slug":"首要规则-不要使用无法信赖的模板","link":"#首要规则-不要使用无法信赖的模板","children":[]},{"level":3,"title":"Vue 自身的安全机制","slug":"vue-自身的安全机制","link":"#vue-自身的安全机制","children":[]}]}],"relativePath":"articles/vue/best-practices.md"}'),e={name:"articles/vue/best-practices.md"},p=l(`<h1 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a></h1><h2 id="追踪运行时错误" tabindex="-1">追踪运行时错误 <a class="header-anchor" href="#追踪运行时错误" aria-hidden="true">#</a></h2><p>应用级错误处理 可以用来向追踪服务报告错误; 诸如 <a href="https://docs.sentry.io/platforms/javascript/guides/vue/" target="_blank" rel="noreferrer">Sentry</a> 和 <a href="https://docs.bugsnag.com/platforms/javascript/vue/" target="_blank" rel="noreferrer">Bugsnag</a> 等服务也为 Vue 提供了官方集成</p><h2 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-hidden="true">#</a></h2><p>web 应用性能的两个主要方面：</p><ul><li><strong>页面加载性能</strong>: 首次访问时，应用展示出内容与达到可交互状态的速度。这通常会用 Google 所定义的一系列 <a href="https://web.dev/vitals/#core-web-vitals" target="_blank" rel="noreferrer">Web 指标</a> (Web Vitals) 来进行衡量，如最大内容绘制 (Largest Contentful Paint，缩写为 LCP) 和首次输入延迟 (First Input Delay，缩写为 FID)。</li><li><strong>更新性能</strong>：应用响应用户输入更新的速度。比如当用户在搜索框中输入时结果列表的更新速度，或者用户在一个单页面应用 (SPA) 中点击链接跳转页面时的切换速度。 <a href="https://web.dev/fast/" target="_blank" rel="noreferrer">web.dev 指南</a></li></ul><h3 id="生产部署的负载性能分析" tabindex="-1">生产部署的负载性能分析 <a class="header-anchor" href="#生产部署的负载性能分析" aria-hidden="true">#</a></h3><ul><li><a href="https://pagespeed.web.dev/" target="_blank" rel="noreferrer">PageSpeed Insights</a></li><li><a href="https://www.webpagetest.org/" target="_blank" rel="noreferrer">WebPageTest</a></li></ul><p>用于本地开发期间的性能分析：</p><ul><li><a href="https://developer.chrome.com/docs/devtools/performance/" target="_blank" rel="noreferrer">Chrome 开发者工具“性能”面板</a><ul><li><a href="https://cn.vuejs.org/api/application.html#app-config-performance" target="_blank" rel="noreferrer">app.config.performance</a> 将会开启 Vue 特有的性能标记，标记在 Chrome 开发者工具的性能时间线上</li></ul></li><li><a href="https://cn.vuejs.org/guide/scaling-up/tooling.html#browser-devtools" target="_blank" rel="noreferrer">Vue 开发者扩展</a>也提供了性能分析的功能</li></ul><h3 id="包体积与-tree-shaking-优化" tabindex="-1">包体积与 Tree-shaking 优化 <a class="header-anchor" href="#包体积与-tree-shaking-优化" aria-hidden="true">#</a></h3><ul><li>提供 ES 模块格式的依赖，它们对 tree-shaking 更友好。举例来说，选择 lodash-es 比 lodash 更好</li><li>查看依赖的体积，并评估与其所提供的功能之间的性价比。像 <a href="https://bundlejs.com/" target="_blank" rel="noreferrer">bundlejs.com</a> 这样的工具可以用来做快速的检查，但是根据实际的构建设置来评估总是最准确的</li></ul><h3 id="更新优化" tabindex="-1">更新优化 <a class="header-anchor" href="#更新优化" aria-hidden="true">#</a></h3><ol><li>Props 稳定性: 就是让传给子组件的 props 尽量保持稳定</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ListItem</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item in list</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    :id=&quot;item.id&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    :active-id=&quot;activeId&quot; /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 每当 activeId 更新时，列表中的每一个 &lt;ListItem&gt; 都会跟着更新！</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ListItem</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">v-for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item in list</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    :id=&quot;item.id&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    :active=&quot;item.id === activeId&quot; /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 大多数的组件来说，activeId 改变时，它们的 active prop 都会保持不变，因此它们无需再更新</span></span>
<span class="line"></span></code></pre></div><h3 id="减少大型不可变数据的响应性开销" tabindex="-1">减少大型不可变数据的响应性开销 <a class="header-anchor" href="#减少大型不可变数据的响应性开销" aria-hidden="true">#</a></h3><p>Vue 的响应性系统默认是深度的。虽然这让状态管理变得更直观，但在数据量巨大时，深度响应性也会导致不小的性能负担，因为每个属性访问都将触发代理的依赖追踪。好在这种性能负担通常这只有在处理超大型数组或层级很深的对象时，例如一次渲染需要访问 100,000+ 个属性时，才会变得比较明显。</p><p>Vue 确实也为此提供了一种解决方案，通过使用 shallowRef() 和 shallowReactive() 来绕开深度响应。浅层式 API 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理。这使得对深层级属性的访问变得更快，但代价是，我们现在必须将所有深层级对象视为不可变的，并且只能通过替换整个根状态来触发更新</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> shallowArray </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shallowRef</span><span style="color:#A6ACCD;">([</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/* 巨大的列表，里面包含深层的对象 */</span></span>
<span class="line"><span style="color:#A6ACCD;">    ])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 这不会触发更新...</span></span>
<span class="line"><span style="color:#A6ACCD;">    shallowArray</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(newObject)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 这才会触发更新</span></span>
<span class="line"><span style="color:#A6ACCD;">    shallowArray</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">shallowArray</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> newObject]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 这不会触发更新...</span></span>
<span class="line"><span style="color:#A6ACCD;">    shallowArray</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 这才会触发更新</span></span>
<span class="line"><span style="color:#A6ACCD;">    shallowArray</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">shallowArray</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">shallowArray</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    ]</span></span>
<span class="line"></span></code></pre></div><h3 id="避免不必要的组件抽象" tabindex="-1">避免不必要的组件抽象 <a class="header-anchor" href="#避免不必要的组件抽象" aria-hidden="true">#</a></h3><p>考虑这种优化的最佳场景还是在大型列表中。想象一下一个有 100 项的列表，每项的组件都包含许多子组件。在这里去掉一个不必要的组件抽象，可能会减少数百个组件实例的无谓性能消耗。</p><h2 id="安全" tabindex="-1">安全 <a class="header-anchor" href="#安全" aria-hidden="true">#</a></h2><h3 id="首要规则-不要使用无法信赖的模板" tabindex="-1">首要规则：不要使用无法信赖的模板 <a class="header-anchor" href="#首要规则-不要使用无法信赖的模板" aria-hidden="true">#</a></h3><p>使用 Vue 时最基本的安全规则就是不要将无法信赖的内容作为你的组件模板。使用无法信赖的模板相当于允许任意的 JavaScript 在你的应用中执行。更糟糕的是，如果在服务端渲染时执行了这些代码，可能会导致服务器被攻击</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">&lt;div&gt;</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> userProvidedString </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">&lt;/div&gt;</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 永远不要这样做！</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mount</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="vue-自身的安全机制" tabindex="-1">Vue 自身的安全机制 <a class="header-anchor" href="#vue-自身的安全机制" aria-hidden="true">#</a></h3><h4 id="html-内容" tabindex="-1">HTML 内容 <a class="header-anchor" href="#html-内容" aria-hidden="true">#</a></h4><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- userProvidedString 为 &lt;script&gt;alert(&quot;hi&quot;)&lt;/script&gt; --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ userProvidedString }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- 它将被转义为如下的 HTML --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &amp;lt;script&amp;gt;alert(&amp;quot;hi&amp;quot;)&amp;lt;/script&amp;gt;</span></span>
<span class="line"></span></code></pre></div><p>这种转义是使用 textContent 这样的浏览器原生 API 完成的，所以只有当浏览器本身存在漏洞时，才会存在漏洞</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> dom </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">p</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    dom</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">textContent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;script&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// innerText 也是一样的效果</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> innerHTML</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> innerText</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> textContent </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> dom</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// innerHTML 为 &amp;lt;script&amp;gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// innerText 为 &lt;script&gt;;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// textContent 为 &lt;script&gt;;</span></span>
<span class="line"></span></code></pre></div><h4 id="attribute-绑定" tabindex="-1">Attribute 绑定 <a class="header-anchor" href="#attribute-绑定" aria-hidden="true">#</a></h4><p>转义是使用 setAttribute 这样的浏览器原生 API 完成的</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> dom </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">p</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    dom</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setAttribute</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">title</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&quot; onclick=&quot;alert(</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">hi</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> outerHTML </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> dom</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// outerHTML 为 &quot;&lt;p title=\\&quot;&amp;quot; onclick=&amp;quot;alert(&#39;hi&#39;)\\&quot;&gt;&lt;/p&gt;&quot;</span></span>
<span class="line"></span></code></pre></div><h4 id="url-注入" tabindex="-1">URL 注入 <a class="header-anchor" href="#url-注入" aria-hidden="true">#</a></h4><p>如果这个 URL 允许通过 javascript: 执行 JavaScript，即没有进行无害化处理，那么就会有一些潜在的安全问题。可以使用一些库来解决此类问题，比如 <a href="https://github.com/braintree/sanitize-url" target="_blank" rel="noreferrer">sanitize-url</a></p><h4 id="样式注入-用户可修改样式" tabindex="-1">样式注入 (用户可修改样式) <a class="header-anchor" href="#样式注入-用户可修改样式" aria-hidden="true">#</a></h4><p>恶意用户仍然能利用 CSS 进行“点击劫持”，例如，可以在“登录”按钮上方覆盖一个透明的链接。如果用户控制的页面专门仿造了你应用的登录页，那么他们就有可能捕获用户的真实登录信息</p><p>除了上面为处理潜在危险提供的建议，我们也建议你熟读下面这些资源：</p><ul><li><a href="https://html5sec.org/" target="_blank" rel="noreferrer">HTML5 安全手册</a></li><li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html" target="_blank" rel="noreferrer">OWASP 的跨站脚本攻击 (XSS) 防护手册</a></li></ul>`,39),t=[p];function o(r,c,i,D,y,C){return n(),a("div",null,t)}const h=s(e,[["render",o]]);export{F as __pageData,h as default};
