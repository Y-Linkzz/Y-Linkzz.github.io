import{_ as s,c as l,o as e,a}from"./app.64e01693.js";const S=JSON.parse('{"title":"应用规模化","description":"","frontmatter":{},"headers":[{"level":2,"title":"单文件组件 (Single-File Components), 简称 SFC","slug":"单文件组件-single-file-components-简称-sfc","link":"#单文件组件-single-file-components-简称-sfc","children":[]},{"level":2,"title":"如何看待关注点分离?","slug":"如何看待关注点分离","link":"#如何看待关注点分离","children":[]},{"level":2,"title":"测试","slug":"测试","link":"#测试","children":[]},{"level":2,"title":"代码规范","slug":"代码规范","link":"#代码规范","children":[]},{"level":2,"title":"测试","slug":"测试-1","link":"#测试-1","children":[{"level":3,"title":"单元测试","slug":"单元测试","link":"#单元测试","children":[]}]},{"level":2,"title":"服务端渲染 (SSR)","slug":"服务端渲染-ssr","link":"#服务端渲染-ssr","children":[{"level":3,"title":"SSR 时还有一些权衡之处需要考量","slug":"ssr-时还有一些权衡之处需要考量","link":"#ssr-时还有一些权衡之处需要考量","children":[]}]},{"level":2,"title":"SSG 静态站点生成 (Static-Site Generation，缩写为 SSG)，也被称为预渲染","slug":"ssg-静态站点生成-static-site-generation-缩写为-ssg-也被称为预渲染","link":"#ssg-静态站点生成-static-site-generation-缩写为-ssg-也被称为预渲染","children":[{"level":3,"title":"SSR vs. SSG","slug":"ssr-vs-ssg","link":"#ssr-vs-ssg","children":[]}]},{"level":2,"title":"SSR的流程","slug":"ssr的流程","link":"#ssr的流程","children":[]},{"level":2,"title":"SSR 框架","slug":"ssr-框架","link":"#ssr-框架","children":[]},{"level":2,"title":"SSR 在组件生命周期钩子里的使用","slug":"ssr-在组件生命周期钩子里的使用","link":"#ssr-在组件生命周期钩子里的使用","children":[]},{"level":2,"title":"激活不匹配 (SSR的HTML结构与客户端HTML不匹配)","slug":"激活不匹配-ssr的html结构与客户端html不匹配","link":"#激活不匹配-ssr的html结构与客户端html不匹配","children":[]}],"relativePath":"articles/vue/scaling-up.md"}'),n={name:"articles/vue/scaling-up.md"},t=a(`<h1 id="应用规模化" tabindex="-1">应用规模化 <a class="header-anchor" href="#应用规模化" aria-hidden="true">#</a></h1><h2 id="单文件组件-single-file-components-简称-sfc" tabindex="-1"><a href="https://cn.vuejs.org/guide/scaling-up/sfc.html" target="_blank" rel="noreferrer">单文件组件 (Single-File Components), 简称 SFC</a> <a class="header-anchor" href="#单文件组件-single-file-components-简称-sfc" aria-hidden="true">#</a></h2><h2 id="如何看待关注点分离" tabindex="-1">如何看待关注点分离? <a class="header-anchor" href="#如何看待关注点分离" aria-hidden="true">#</a></h2><p>前端开发的关注点不是完全基于文件类型分离的。前端工程化的最终目的都是为了能够更好地维护代码。关注点分离不应该是教条式地将其视为文件类型的区别和分离，仅仅这样并不够帮我们在日益复杂的前端应用的背景下提高开发效率</p><h2 id="测试" tabindex="-1"><a href="https://cn.vuejs.org/guide/scaling-up/tooling.html#testing" target="_blank" rel="noreferrer">测试</a> <a class="header-anchor" href="#测试" aria-hidden="true">#</a></h2><ul><li>Cypress 推荐用于 E2E 测试。也可以通过 Cypress 组件测试运行器来给 Vue SFC 作单文件组件测试。</li><li>Vitest 是一个追求更快运行速度的测试运行器，由 Vue / Vite 团队成员开发。主要针对基于 Vite 的应用设计，可以为组件提供即时响应的测试反馈</li><li>Jest 可以通过 vite-jest 配合 Vite 使用。不过只推荐在你已经有一套基于 Jest 的测试集、且想要迁移到基于 Vite 的开发配置时使用，因为 Vitest 也能够提供类似的功能，且后者与 Vite 的集成更方便高效</li></ul><h2 id="代码规范" tabindex="-1"><a href="https://cn.vuejs.org/guide/scaling-up/tooling.html#linting" target="_blank" rel="noreferrer">代码规范</a> <a class="header-anchor" href="#代码规范" aria-hidden="true">#</a></h2><h2 id="测试-1" tabindex="-1">测试 <a class="header-anchor" href="#测试-1" aria-hidden="true">#</a></h2><h3 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-hidden="true">#</a></h3><p>编写单元测试是为了验证小的、独立的代码单元是否按预期工作。一个单元测试通常覆盖一个单个函数、类、组合式函数或模块。单元测试侧重于逻辑上的正确性，只关注应用整体功能的一小部分。他们可能会模拟你的应用环境的很大一部分（如初始状态、复杂的类、第三方模块和网络请求）</p><h4 id="vue-的特定功能进行单元测试-vitest" tabindex="-1">Vue 的特定功能进行单元测试 （Vitest） <a class="header-anchor" href="#vue-的特定功能进行单元测试-vitest" aria-hidden="true">#</a></h4><ul><li>组合式函数</li><li>组件</li></ul><h4 id="组件挂载库" tabindex="-1">组件挂载库 <a class="header-anchor" href="#组件挂载库" aria-hidden="true">#</a></h4><p>组件测试通常涉及到单独挂载被测试的组件，触发模拟的用户输入事件，并对渲染的 DOM 输出进行断言。有一些专门的工具库可以使这些任务变得更简单</p><ul><li>@testing-library/vue 是一个 Vue 的测试库，专注于测试组件而不依赖其他实现细节。因其良好的设计使得代码重构也变得非常容易。它的指导原则是，测试代码越接近软件的使用方式，它们就越值得信赖</li><li>@vue/test-utils 是官方的底层组件测试库，用来提供给用户访问 Vue 特有的 API。@testing-library/vue 也是基于此库构建的</li></ul><p>推荐使用 @testing-library/vue 测试应用中的组件, 因为它更匹配整个应用的测试优先级。只有在你构建高级组件、并需要测试内部的 Vue 特有 API 时再使用 @vue/test-utils</p><h2 id="服务端渲染-ssr" tabindex="-1"><a href="https://cn.vuejs.org/guide/scaling-up/ssr.html" target="_blank" rel="noreferrer">服务端渲染 (SSR)</a> <a class="header-anchor" href="#服务端渲染-ssr" aria-hidden="true">#</a></h2><p>Vue.js 是一个用于构建客户端应用的框架。默认情况下，Vue 组件的职责是在浏览器中生成和操作 DOM。然而，Vue 也支持将组件在服务端直接渲染成 HTML 字符串，作为服务端响应返回给浏览器，最后在浏览器端将静态的 HTML“激活”(hydrate) 为能够交互的客户端应用。</p><p>一个由服务端渲染的 Vue.js 应用也可以被认为是“同构的”(Isomorphic) 或“通用的”(Universal)，因为应用的大部分代码同时运行在服务端和客户端。</p><h3 id="ssr-时还有一些权衡之处需要考量" tabindex="-1">SSR 时还有一些权衡之处需要考量 <a class="header-anchor" href="#ssr-时还有一些权衡之处需要考量" aria-hidden="true">#</a></h3><ul><li><strong>开发中的限制</strong>。浏览器端特定的代码只能在某些生命周期钩子中使用；一些外部库可能需要特殊处理才能在服务端渲染的应用中运行</li><li><strong>更多的与构建配置和部署相关的要求</strong>。服务端渲染的应用需要一个能让 Node.js 服务器运行的环境，不像完全静态的 SPA 那样可以部署在任意的静态文件服务器上</li><li><strong>更高的服务端负载</strong>。在 Node.js 中渲染一个完整的应用要比仅仅托管静态文件更加占用 CPU 资源，因此如果你预期有高流量，请为相应的服务器负载做好准备，并采用合理的缓存策略</li></ul><p>在为你的应用使用 SSR 之前，你首先应该问自己是否真的需要它。这主要取决于首屏加载速度对应用的重要程度。例如，如果你正在开发一个<strong>内部的管理面板，初始加载时的那额外几百毫秒对你来说并不重要，这种情况下使用 SSR 就没有太多必要了</strong>。然而，<strong>在内容展示速度极其重要的场景下，SSR 可以尽可能地帮你实现最优的初始加载性能</strong></p><h2 id="ssg-静态站点生成-static-site-generation-缩写为-ssg-也被称为预渲染" tabindex="-1">SSG 静态站点生成 (Static-Site Generation，缩写为 SSG)，也被称为预渲染 <a class="header-anchor" href="#ssg-静态站点生成-static-site-generation-缩写为-ssg-也被称为预渲染" aria-hidden="true">#</a></h2><p>如果用服务端渲染一个页面所需的数据对每个用户来说都是相同的，那么我们可以只渲染一次，提前在构建过程中完成，而不是每次请求进来都重新渲染页面。预渲染的页面生成后作为静态 HTML 文件被服务器托管</p><h3 id="ssr-vs-ssg" tabindex="-1">SSR vs. SSG <a class="header-anchor" href="#ssr-vs-ssg" aria-hidden="true">#</a></h3><p>SSG 保留了和 SSR 应用相同的性能表现：它带来了优秀的首屏加载性能。同时，它比 SSR 应用的花销更小，也更容易部署，因为它输出的是静态 HTML 和资源文件。这里的关键词是静态：SSG 仅可以用于消费静态数据的页面，即数据在构建期间就是已知的，并且在多次部署期间不会改变。每当数据变化时，都需要重新部署</p><p>如果你调研 SSR 只是为了优化为数不多的营销页面的 SEO (例如 /、/about 和 /contact 等)，那么你可能需要 SSG 而不是 SSR。SSG 也非常适合构建基于内容的网站，比如文档站点或者博客</p><h2 id="ssr的流程" tabindex="-1">SSR的流程 <a class="header-anchor" href="#ssr的流程" aria-hidden="true">#</a></h2><ul><li>服务端直接渲染成 HTML 字符串，返回给客户端。这时HTML 在客户端是完全静态的</li><li>客户端中：Vue 会创建一个与服务端完全相同的应用实例，然后将每个组件与它应该控制的 DOM 节点相匹配，并添加 DOM 事件监听器</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 该文件运行在浏览器中</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createSSRApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createSSRApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...和服务端完全一致的应用实例</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 在客户端挂载一个 SSR 应用时会假定</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// HTML 是预渲染的，然后执行激活过程，</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 而不是挂载新的 DOM 节点</span></span>
<span class="line"><span style="color:#A6ACCD;">    app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mount</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="ssr-框架" tabindex="-1">SSR 框架 <a class="header-anchor" href="#ssr-框架" aria-hidden="true">#</a></h2><ul><li><a href="https://nuxt.com/" target="_blank" rel="noreferrer">Nuxt</a>是一个构建于 Vue 生态系统之上的全栈框架，它为编写 Vue SSR 应用提供了丝滑的开发体验。更棒的是，你还可以把它当作一个静态站点生成器来用！我们强烈建议你试一试</li><li><a href="https://quasar.dev/" target="_blank" rel="noreferrer">Quasar</a>是一个基于 Vue 的完整解决方案，它可以让你用同一套代码库构建不同目标的应用，如 SPA、SSR、PWA、移动端应用、桌面端应用以及浏览器插件。除此之外，它还提供了一整套 Material Design 风格的组件库</li><li>Vite SSR： Vite 提供了内置的 Vue 服务端渲染支持，但它在设计上是偏底层的。如果你想要直接使用 Vite，可以看看 vite-plugin-ssr，一个帮你抽象掉许多复杂细节的社区插件。 你也可以在这里查看一个使用手动配置的 Vue + Vite SSR 的示例项目，以它作为基础来构建。请注意，这种方式只有在你有丰富的 SSR 和构建工具经验，并希望对应用的架构做深入的定制时才推荐使用</li></ul><h2 id="ssr-在组件生命周期钩子里的使用" tabindex="-1">SSR 在组件生命周期钩子里的使用 <a class="header-anchor" href="#ssr-在组件生命周期钩子里的使用" aria-hidden="true">#</a></h2><p>因为没有任何动态更新，所以像 onMounted 或者 onUpdated 这样的生命周期钩子不会在 SSR 期间被调用，而只会在客户端运行。</p><p>你应该避免在 <code>setup()</code> 或者 <code>&lt;script setup&gt;</code> 的根作用域中使用会产生副作用且需要被清理的代码。这类副作用的常见例子是使用 setInterval 设置定时器。我们可能会在客户端特有的代码中设置定时器，然后在 onBeforeUnmount 或 onUnmounted 中清除。然而，由于 unmount 钩子不会在 SSR 期间被调用，所以定时器会永远存在。为了避免这种情况，请将含有<strong>副作用的代码放到 onMounted 中</strong></p><h2 id="激活不匹配-ssr的html结构与客户端html不匹配" tabindex="-1">激活不匹配 (SSR的HTML结构与客户端HTML不匹配) <a class="header-anchor" href="#激活不匹配-ssr的html结构与客户端html不匹配" aria-hidden="true">#</a></h2><ol><li>组件模板中存在不符合规范的 HTML 结构，渲染后的 HTML 被浏览器原生的 HTML 解析行为纠正导致不匹配。举例来说，一个常见的错误是 <code>&lt;div&gt;</code> 不能被放在 <code>&lt;p&gt;</code> 中</li></ol><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- SSR --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">hi</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">&lt;!-- 客户端 --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">hi</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><a href="https://www.w3docs.com/learn-html/html-p-tag.html" target="_blank" rel="noreferrer">https://www.w3docs.com/learn-html/html-p-tag.html</a></p><ul><li><code>&lt;p&gt;标签成对出现。内容写在开始 (&lt;p&gt;) 和结束 (&lt;/p&gt;) 标记之间。如果省略结束标记，则认为段落的结尾与下一个块级元素的开头匹配</code></li><li><code>&lt;div&gt;是一个块元素，它的开始标签会导致父元素&lt;p&gt;关闭,因此&lt;div&gt;永远不能嵌套在里面&lt;p&gt;</code> CSS 值是在 dom 解析之后应用的,即使我们让它div as inline in CSS没有用</li><li><code>元素的结束标记&lt;div&gt;是必需的,&lt;div&gt;元素的结尾将仅由其结束标记确定&lt;/div&gt;，因此&lt;p&gt;内部元素不会破坏它</code></li></ul><ol start="2"><li>渲染所用的数据中包含随机生成的值。<strong>由于同一个应用会在服务端和客户端执行两次，每次执行生成的随机数都不能保证相同</strong>。避免随机数不匹配有两种选择 <ol><li>利用 v-if + onMounted 让需要用到随机数的模板只在客户端渲染。你所用的上层框架可能也会提供简化这个用例的内置 API，比如 VitePress 的 <code>&lt;ClientOnly&gt;</code> 组件</li><li>使用一个能够接受随机种子的随机数生成库，并确保服务端和客户端使用同样的随机数种子 (比如把种子包含在序列化的状态中，然后在客户端取回)。</li></ol></li><li>服务端和客户端的时区不一致。有时候我们可能会想要把一个时间转换为用户的当地时间，但在服务端的时区跟用户的时区可能并不一致，我们也并不能可靠的在服务端预先知道用户的时区。这种情况下，<strong>当地时间的转换也应该作为纯客户端逻辑去执行</strong>。</li></ol><p>当 Vue 遇到激活不匹配时，它将尝试自动恢复并调整预渲染的 DOM 以匹配客户端的状态。这将导致一些渲染性能的损失，因为需要丢弃不匹配的节点并渲染新的节点，但大多数情况下，应用应该会如预期一样继续工作。尽管如此，最好还是在开发过程中发现并避免激活不匹配。</p>`,42),r=[t];function i(o,p,c,d,h,g){return e(),l("div",null,r)}const y=s(n,[["render",i]]);export{S as __pageData,y as default};
