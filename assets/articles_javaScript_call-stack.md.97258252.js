import{_ as a,c as s,o as l,a as n}from"./app.64e01693.js";const t="/assets/2023-03-31-09-50-27.b7b7c122.png",e="/assets/2023-03-30-17-03-20.d8e54716.png",r="/assets/2023-03-30-17-07-07.bf14a170.png",o="/assets/2023-03-30-17-08-45.500c26b3.png",i="/assets/2023-03-30-17-10-59.8206ac3a.png",p="/assets/2023-03-30-17-11-29.92dea733.png",f=JSON.parse('{"title":"JavaScript的执行机制——调用栈","description":"","frontmatter":{},"headers":[{"level":2,"title":"JavaScript运行机制","slug":"javascript运行机制","link":"#javascript运行机制","children":[]},{"level":2,"title":"什么是执行上下文","slug":"什么是执行上下文","link":"#什么是执行上下文","children":[{"level":3,"title":"执行上下文的生命周期","slug":"执行上下文的生命周期","link":"#执行上下文的生命周期","children":[]}]},{"level":2,"title":"什么是 JavaScript 的调用栈 (执行栈)","slug":"什么是-javascript-的调用栈-执行栈","link":"#什么是-javascript-的调用栈-执行栈","children":[]},{"level":2,"title":"浏览器查看调用栈的信息","slug":"浏览器查看调用栈的信息","link":"#浏览器查看调用栈的信息","children":[]},{"level":2,"title":"栈溢出（Stack Overflow）（递归）","slug":"栈溢出-stack-overflow-递归","link":"#栈溢出-stack-overflow-递归","children":[]}],"relativePath":"articles/javaScript/call-stack.md"}'),c={name:"articles/javaScript/call-stack.md"},d=n('<h1 id="javascript的执行机制——调用栈" tabindex="-1"><a href="https://blog.csdn.net/qq_44182284/article/details/117084943" target="_blank" rel="noreferrer">JavaScript的执行机制——调用栈</a> <a class="header-anchor" href="#javascript的执行机制——调用栈" aria-hidden="true">#</a></h1><h2 id="javascript运行机制" tabindex="-1">JavaScript运行机制 <a class="header-anchor" href="#javascript运行机制" aria-hidden="true">#</a></h2><h2 id="什么是执行上下文" tabindex="-1"><a href="https://github.com/LinDaiDai/niubility-coding-js/blob/master/JavaScript/%E8%B0%83%E7%94%A8%E5%A0%86%E6%A0%88/JavaScript%E8%BF%9B%E9%98%B6-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87.md" target="_blank" rel="noreferrer">什么是执行上下文</a> <a class="header-anchor" href="#什么是执行上下文" aria-hidden="true">#</a></h2><p>执行上下文就是javascript代码被解析和执行时所在环境的抽象概念。每当 Javascript 代码在运行的时候，它都是在执行上下文中运行</p><p>执行上下文的类型:</p><ul><li><strong>全局执行上下文</strong> — 这是默认或者说基础的上下文，任何不在函数内部的代码都在全局上下文中。它会执行两件事：创建一个全局的 window 对象（浏览器的情况下），并且设置 this 的值等于这个全局对象。一个程序中只会有一个全局执行上下文。</li><li><strong>函数执行上下文</strong> — 每当一个函数被调用时, 都会为该函数创建一个新的上下文。每个函数都有它自己的执行上下文，不过是在函数被调用时创建的。函数上下文可以有任意多个。每当一个新的执行上下文被创建，它会按定义的顺序（将在后文讨论）执行一系列步骤。</li><li><strong>Eval 函数执行上下文</strong> — 执行在 eval 函数内部的代码也会有它属于自己的执行上下文，但由于 JavaScript 开发者并不经常使用 eval，所以在这里我不会讨论它。</li></ul><h3 id="执行上下文的生命周期" tabindex="-1">执行上下文的生命周期 <a class="header-anchor" href="#执行上下文的生命周期" aria-hidden="true">#</a></h3><p>执行上下文的生命周期也非常容易理解, 分为三个阶段:</p><ol><li>创建阶段</li><li>执行阶段</li><li>销毁阶段</li></ol><h4 id="创建阶段" tabindex="-1">创建阶段 <a class="header-anchor" href="#创建阶段" aria-hidden="true">#</a></h4><ol><li>确定this的值, 也就是绑定this (This Binding);</li><li>**词法环境(LexicalEnvironment)**组件被创建; (在ES6中提出词法环境和变量环境两个概念)</li><li>**变量环境(VariableEnvironment)**组件被创建.</li></ol><p><img src="'+t+`" alt=""></p><h5 id="this-binding" tabindex="-1">This Binding <a class="header-anchor" href="#this-binding" aria-hidden="true">#</a></h5><p>通过上面的介绍我们知道实际开发主要用到两种执行上下文为全局和函数, 那么绑定this在这两种上下文中也不同.</p><ul><li>全局执行上下文中, this指的就是全局对象, 浏览器环境指向window对象, nodejs中指向这个文件的module对象.</li><li>函数执行上下文较为复杂, this的值取决于函数的调用方式. 具体有: 默认绑定、隐式绑定、显式绑定、new绑定、箭头函数.</li></ul><h5 id="词法环境" tabindex="-1">词法环境 <a class="header-anchor" href="#词法环境" aria-hidden="true">#</a></h5><p><a href="https://stackoverflow.com/questions/23948198/variable-environment-vs-lexical-environment" target="_blank" rel="noreferrer">https://stackoverflow.com/questions/23948198/variable-environment-vs-lexical-environment</a><a href="https://juejin.cn/post/7116095340859621412" target="_blank" rel="noreferrer">https://juejin.cn/post/7116095340859621412</a></p><p><strong>词法环境</strong>是由两个部分<strong>组成</strong>的:</p><ol><li><strong>环境记录</strong>: 存储变量和函数声明的实际位置;</li><li><strong>对外部环境的引用</strong>: 用于访问其外部词法环境.</li></ol><p>同样的, <strong>词法环境</strong>也主要有两种类型:</p><ol><li><strong>全局环境</strong>: 拥有一个全局对象(window对象)及其关联的所有属性和方法(比如数组的方法splice、concat等), 同时也包含了用户自定义的全局变量. 但是<strong>全局环境</strong>中没有外部环境的引用, 也就是外部环境引用为null.</li><li><strong>函数环境</strong>: 用户在函数中自定义的变量和函数存储在<strong>环境记录</strong>中, 包含了arguments对象. 而对外部环境的引用可以是<strong>全局环境</strong>， 也可以是另一个<strong>函数环境</strong>(比如一个函数中包含了另一个函数).</li></ol><h5 id="变量环境" tabindex="-1">变量环境 <a class="header-anchor" href="#变量环境" aria-hidden="true">#</a></h5><p><strong>变量环境</strong>其实也是一个词法环境, 因此它具有上面定义的词法环境的所有属性.</p><p>在 ES6 中，词法 环境和 变量 环境的区别在于前者用于存储**函数声明和变量（ let 和 const ）绑定，而后者仅用于存储变量（ var ）**绑定。</p><h2 id="什么是-javascript-的调用栈-执行栈" tabindex="-1">什么是 JavaScript 的调用栈 (执行栈) <a class="header-anchor" href="#什么是-javascript-的调用栈-执行栈" aria-hidden="true">#</a></h2><ol><li>js代码在运行时可能会产生无数个执行上下文，那么它是如何管理这些执行上下文的呢?</li><li>同时由于js是单线程的，所以不能同时干两件事，必须一个个去执行，那么这么多的执行上下文是按什么顺序执行的呢？</li></ol><p>管理多个执行上下文靠的就是执行栈，也被叫做调用栈。</p><p><strong>特点</strong>： 后进先出（LIFO）的结构。</p><p><strong>作用</strong>：存储在代码执行期间的所有执行上下文。</p><ul><li>调用栈一般指的是函数之间的调用关系形成的栈</li><li>多个嵌套的函数执行时序机制</li><li>调用栈是 JavaScript 引擎追踪函数执行的一个机制，当一次有多个函数被调用时，通过调用栈就能够追踪到哪个函数正在被执行以及各函数之间的调用关系。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">c</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">c</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">addAll</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">c</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">d</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span></span>
<span class="line"><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">d</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">addAll</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><ol><li><p>第一步，创建全局上下文，并将其压入栈底。从图中你也可以看出，变量 a、函数 add 和 addAll 都保存到了全局上下文的变量环境对象中。全局执行上下文压入到调用栈后，JavaScript 引擎便开始执行全局代码了。首先会执行 a=2 的赋值操作，执行该语句会将全局上下文变量环境中 a 的值设置为 2 <img src="`+e+'" alt=""></p></li><li><p>第二步，是调用 addAll 函数。当调用该函数时，JavaScript 引擎会编译该函数，并为其创建一个执行上下文，最后还将该函数的执行上下文压入栈中。addAll 函数的执行上下文创建好之后，便进入了函数代码的执行阶段了，这里先执行的是 d=10 的赋值操作，执行语句会将 addAll 函数执行上下文中的 d 由 undefined 变成了 10 <img src="'+r+'" alt=""></p></li><li><p>第三步，当执行到 add 函数调用语句时，同样会为其创建执行上下文，并将其压入调用栈。当 add 函数返回时，该函数的执行上下文就会从栈顶弹出，并将 result 的值设置为 add 函数的返回值 <img src="'+o+'" alt=""></p></li></ol><h2 id="浏览器查看调用栈的信息" tabindex="-1">浏览器查看调用栈的信息 <a class="header-anchor" href="#浏览器查看调用栈的信息" aria-hidden="true">#</a></h2><p><img src="'+i+'" alt=""><img src="'+p+'" alt=""></p><h2 id="栈溢出-stack-overflow-递归" tabindex="-1">栈溢出（Stack Overflow）（递归） <a class="header-anchor" href="#栈溢出-stack-overflow-递归" aria-hidden="true">#</a></h2><p>现在你知道了调用栈是一种用来管理执行上下文的数据结构，符合后进先出的规则。不过还有一点你要注意，调用栈是有大小的，当入栈的执行上下文超过一定数目，JavaScript 引擎就会报错，我们把这种错误叫做栈溢出。</p>',36),h=[d];function g(y,A,v,F,D,C){return l(),s("div",null,h)}const _=a(c,[["render",g]]);export{f as __pageData,_ as default};
