import{_ as s,c as a,o as l,a as n}from"./app.64e01693.js";const o="/EventLoop.png",e="/assets/event-loop.fd30000f.gif",h=JSON.parse('{"title":"Event Loop 事件循环","description":"","frontmatter":{},"headers":[{"level":2,"title":"为什么JavaScript是单线程？","slug":"为什么javascript是单线程","link":"#为什么javascript是单线程","children":[]},{"level":2,"title":"运行机制","slug":"运行机制","link":"#运行机制","children":[{"level":3,"title":"宏任务（macrotask）","slug":"宏任务-macrotask","link":"#宏任务-macrotask","children":[]},{"level":3,"title":"微任务（microtask）","slug":"微任务-microtask","link":"#微任务-microtask","children":[]},{"level":3,"title":"运行机制（进阶）","slug":"运行机制-进阶","link":"#运行机制-进阶","children":[]}]}],"relativePath":"articles/javaScript/event-loop.md"}'),t={name:"articles/javaScript/event-loop.md"},p=n('<h1 id="event-loop-事件循环" tabindex="-1">Event Loop 事件循环 <a class="header-anchor" href="#event-loop-事件循环" aria-hidden="true">#</a></h1><p><a href="https://juejin.cn/post/6844903998747574286#heading-3" target="_blank" rel="noreferrer">文章</a></p><h2 id="为什么javascript是单线程" tabindex="-1">为什么JavaScript是单线程？ <a class="header-anchor" href="#为什么javascript是单线程" aria-hidden="true">#</a></h2><p>JavaScript的主要用途是与用户互动，以及操作DOM。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p><h2 id="运行机制" tabindex="-1">运行机制 <a class="header-anchor" href="#运行机制" aria-hidden="true">#</a></h2><ul><li>JS分为同步任务和异步任务</li><li>同步任务都在主线程上执行，形成一个<strong>执行栈</strong></li><li>主线程之外，事件触发线程管理着一个任务队列，只要异步任务有了运行结果，就在任务队列之中放置一个事件</li><li>一旦执行栈中的所有同步任务执行完毕（此时JS引擎空闲），系统就会读取任务队列，将可运行的异步任务添加到可执行栈中，开始执行</li></ul><h3 id="宏任务-macrotask" tabindex="-1">宏任务（macrotask） <a class="header-anchor" href="#宏任务-macrotask" aria-hidden="true">#</a></h3><p>可以理解是每次<strong>执行栈</strong>执行的代码就是一个宏任务（包括每次从事件队列中获取一个事件回调并放到执行栈中执行</p><p>主代码块，setTimeout、setInterval、I/O、UI 交互事件、postMessage、MessageChannel(优先级是：MessageChannel-&gt;setTimeout)、setImmediate(Node.js 环境)</p><ul><li>每一个task会从头到尾将这个任务执行完毕，不会执行其它</li><li>浏览器为了能够使得JS内部task与DOM任务能够有序的执行，会在一个task执行结束后，在下一个 task 执行开始前，对页面进行重新渲染 （task-&gt;渲染-&gt;task-&gt;...）</li></ul><h3 id="微任务-microtask" tabindex="-1">微任务（microtask） <a class="header-anchor" href="#微任务-microtask" aria-hidden="true">#</a></h3><p>可以理解是在当前task执行结束后立即执行的任务</p><p>Promise.then、 MutationObserver(优先级小于Promise， 一般是Promise不支持时才会这样做)、 process.nextTick(Node.js 环境,在node环境下，process.nextTick的优先级高于Promise)</p><ul><li>在当前task任务后，下一个task之前，在渲染之前</li><li>它的响应速度相比setTimeout（setTimeout是task）会更快，因为无需等渲染</li><li>在某一个macrotask执行完后，就会将在它执行期间产生的所有microtask都执行完毕（在渲染前）</li></ul><h3 id="运行机制-进阶" tabindex="-1">运行机制（进阶） <a class="header-anchor" href="#运行机制-进阶" aria-hidden="true">#</a></h3><ul><li>执行一个宏任务（栈中没有就从事件队列中获取）</li><li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li><li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li><li>当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染</li><li>渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取）</li></ul><p><img src="'+o+`" alt=""></p><p><a href="http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIGNvbnNvbGUubG9nKCJIaSEiKTsKICAgIGNvbnNvbGUubG9nKCJDbGljayB0aGUgYnV0dG9uISIpOwogICAgc2V0VGltZW91dChmdW5jdGlvbiB0aW1lcigpIHsKICAgICAgICBjb25zb2xlLmxvZygnWW91IGNsaWNrZWQgdGhlIGJ1dHRvbiEnKTsgICAgCiAgICB9LCAxNTAwMCk7Cn0pOwoK!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D" target="_blank" rel="noreferrer">http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIGNvbnNvbGUubG9nKCJIaSEiKTsKICAgIGNvbnNvbGUubG9nKCJDbGljayB0aGUgYnV0dG9uISIpOwogICAgc2V0VGltZW91dChmdW5jdGlvbiB0aW1lcigpIHsKICAgICAgICBjb25zb2xlLmxvZygnWW91IGNsaWNrZWQgdGhlIGJ1dHRvbiEnKTsgICAgCiAgICB9LCAxNTAwMCk7Cn0pOwoK!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D</a></p><p><a href="https://roadmap.sh/javascript" target="_blank" rel="noreferrer">https://roadmap.sh/javascript</a> 思维导图</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">First</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> bar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Second</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">500</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> baz </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Third</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">bar</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">baz</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><img src="`+e+'" alt=""></p>',21),r=[p];function c(i,C,A,D,y,d){return l(),a("div",null,r)}const F=s(t,[["render",c]]);export{h as __pageData,F as default};
