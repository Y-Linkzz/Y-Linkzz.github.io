import{_ as s,c as n,o as a,a as e}from"./app.64e01693.js";const C=JSON.parse('{"title":"Vue的知识分享","description":"","frontmatter":{},"headers":[{"level":2,"title":"Vue2 与 Vue3","slug":"vue2-与-vue3","link":"#vue2-与-vue3","children":[]},{"level":2,"title":"组合式 API 与 React Hooks 的对比","slug":"组合式-api-与-react-hooks-的对比","link":"#组合式-api-与-react-hooks-的对比","children":[]},{"level":2,"title":"什么是响应性","slug":"什么是响应性","link":"#什么是响应性","children":[]},{"level":2,"title":"getter（Vue3 的 ref)","slug":"getter-vue3-的-ref","link":"#getter-vue3-的-ref","children":[]},{"level":2,"title":"get 与 defineProperty 的区别","slug":"get-与-defineproperty-的区别","link":"#get-与-defineproperty-的区别","children":[]},{"level":2,"title":"Object.defineProperty() 给现有对象添加 getter setter","slug":"object-defineproperty-给现有对象添加-getter-setter","link":"#object-defineproperty-给现有对象添加-getter-setter","children":[]},{"level":2,"title":"枚举是什么","slug":"枚举是什么","link":"#枚举是什么","children":[{"level":3,"title":"js的标准中是没有枚举这一说的,但在typescript中是有这个类型的","slug":"js的标准中是没有枚举这一说的-但在typescript中是有这个类型的","link":"#js的标准中是没有枚举这一说的-但在typescript中是有这个类型的","children":[]}]},{"level":2,"title":"Proxy （Vue3 的reactive）","slug":"proxy-vue3-的reactive","link":"#proxy-vue3-的reactive","children":[]}],"relativePath":"articles/vue/interview.md"}'),l={name:"articles/vue/interview.md"},o=e(`<h1 id="vue的知识分享" tabindex="-1">Vue的知识分享 <a class="header-anchor" href="#vue的知识分享" aria-hidden="true">#</a></h1><h2 id="vue2-与-vue3" tabindex="-1">Vue2 与 Vue3 <a class="header-anchor" href="#vue2-与-vue3" aria-hidden="true">#</a></h2><ul><li><strong>更好的逻辑复用</strong>: 在选项式 API 中我们主要的逻辑复用机制是 mixins, 组合式 API 解决了 <a href="https://cn.vuejs.org/guide/reusability/composables.html#comparisons-with-other-techniques" target="_blank" rel="noreferrer">mixins 的所有缺陷</a></li><li><strong>更灵活的代码组织</strong>: 在多个逻辑关注点中，选项式 API 将相同逻辑关注点的代码被强制拆分在了不同的选项中，在一个几百行的大组件中，要读懂代码中的一个逻辑关注点，需要在文件中反复上下滚动；组合式 API 可将一个逻辑关注点抽取重构到一个可复用的工具函数中，一个逻辑关注点相关的代码被归为了一组。如果需要重构，不再需要为了抽象而重新组织代码，大大降低了重构成本，这在长期维护的大型项目中非常关键。(适合大项目)</li><li><strong>更好的类型推导</strong>: 选项式 API 需要通过复杂的类型体操或者Class API 来实现类型推导；组合式 API 主要利用基本的变量和函数，它们本身就是类型友好的；</li><li><strong>更小的生产包体积</strong>： 选项式 API 需要依赖 this 上下文对象访问属性；组合式 API 因为<code>&lt;script setup&gt;</code> 形式书写的组件模板被编译为了一个内联函数，和 <code>&lt;script setup&gt;</code> 中的代码位于同一作用域。 被编译的模板可以直接访问 <code>&lt;script setup&gt;</code> 中定义的变量，无需从实例中代理。这对代码压缩更友好，因为本地变量的名字可以被压缩，但对象的属性名则不能。</li></ul><h2 id="组合式-api-与-react-hooks-的对比" tabindex="-1"><a href="https://cn.vuejs.org/guide/extras/composition-api-faq.html#comparison-with-react-hooks" target="_blank" rel="noreferrer">组合式 API 与 React Hooks 的对比</a> <a class="header-anchor" href="#组合式-api-与-react-hooks-的对比" aria-hidden="true">#</a></h2><p>React Hooks 是组合式 API 的一个主要灵感来源</p><h2 id="什么是响应性" tabindex="-1">什么是响应性 <a class="header-anchor" href="#什么是响应性" aria-hidden="true">#</a></h2><p>本质上，响应性是一种可以使我们声明式地处理变化的编程范式</p><h2 id="getter-vue3-的-ref" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/get" target="_blank" rel="noreferrer">getter</a>（Vue3 的 ref) <a class="header-anchor" href="#getter-vue3-的-ref" aria-hidden="true">#</a></h2><p>get 语法将 <strong>对象属性</strong> 绑定到 <strong>查询该属性时</strong> 将 <strong>被调用的函数</strong>。</p><p>描述: 有时需要允许访问返回动态计算值的属性，或者你可能需要反映内部变量的状态，而不需要使用显式方法调用</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">log</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">get</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">latest</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">log</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">log</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">latest)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Expected output: &quot;c&quot;</span></span>
<span class="line"></span></code></pre></div><p>Getters 给你一种方法来定义一个对象的属性，但是在访问它们之前不会计算属性的值。getter 延迟计算值的成本，直到需要此值，如果不需要，您就不用支付成本</p><p>一种额外的优化技术是用智能 (或称记忆化)getters 延迟属性值的计算并将其缓存以备以后访问。该值是在第一次调用 getter 时计算的，然后被缓存，因此后续访问返回缓存值而不重新计算它。这在以下情况下很有用：</p><ul><li>如果属性值的计算是昂贵的（占用大量 RAM 或 CPU 时间，产生工作线程，检索远程文件等）。</li><li>如果现在不需要该值。它将在稍后使用，或在某些情况下它根本不使用。</li><li>如果被使用，它将被访问几次，并且不需要重新计算，该值将永远不会被改变，或者不应该被重新计算。</li></ul><h2 id="get-与-defineproperty-的区别" tabindex="-1">get 与 defineProperty 的区别 <a class="header-anchor" href="#get-与-defineproperty-的区别" aria-hidden="true">#</a></h2><p>在classes中使用时，二者有细微的差别；当使用 get 关键字时，属性将被定义在实例的原型上，当使用Object.defineProperty()时，属性将被定义在实例自身上。</p><h2 id="object-defineproperty-给现有对象添加-getter-setter" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noreferrer">Object.defineProperty()</a> 给现有对象添加 getter setter <a class="header-anchor" href="#object-defineproperty-给现有对象添加-getter-setter" aria-hidden="true">#</a></h2><p>Object.defineProperty(obj, prop, descriptor)</p><p>参数</p><ul><li>obj: 要定义属性的对象。</li><li>prop: 要定义或修改的属性的名称或 Symbol 。</li><li>descriptor: 要定义或修改的<strong>属性描述符</strong>。</li></ul><p>属性描述符有两种主要形式: <strong>数据描述符</strong>和<strong>存取描述符</strong></p><p><strong>一个描述符只能是这两者其中之一；不能同时是两者。</strong></p><ul><li><strong>数据描述符</strong>: 是一个具有值的属性，该值可以是可写的，也可以是不可写的。 可选键值： value （该属性对应的值）； writable （是否可以被更改）</li><li><strong>存取描述符</strong>：是由 getter 函数和 setter 函数所描述的属性 可选键值: get； set</li></ul><p>这些选项不一定是自身属性，也要考虑继承来的属性。为了确认保留这些默认值，在设置之前，可能要冻结(Object.freeze) <code>Object.prototype</code>，明确指定所有的选项，或者通过 <code>Object.create(null)</code> 将 <code>Object.prototype.__proto__</code> 属性指向 null</p><p><strong>Object.freeze 可以防止后续代码添加或删除对象原型的属性。Vue运用场景：不想让某个对象有响应式，减少性能的消耗</strong></p><h2 id="枚举是什么" tabindex="-1">枚举是什么 <a class="header-anchor" href="#枚举是什么" aria-hidden="true">#</a></h2><ul><li><strong>枚举指对象的属性是否可以遍历出来</strong>，简单点说就是是否可以被列举出来。可枚举性决定了这个属性能否被for…in(Object.keys(o))查找遍历到</li><li>js中基本包装类型的原型属性是不可枚举的</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> pro </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> num) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">num.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pro</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> = </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">pro</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 结果为空，因为Number中内置的属性是不可枚举的</span></span>
<span class="line"></span></code></pre></div><ul><li>判断一个属性是否可枚举，用Object.propertyIsEnumerable()来判断，但需要注意的一点是如果需要判断的属性在object的原型链上，不管它是否可枚举，Object.propertyIsEnumerable()都会返回false</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">enumer</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我是对象本身就有的属性</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">enumer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我是通过对象原型挂载的属性</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> fn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">enumer</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#A6ACCD;">(fn</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我是通过Object.defineProperty方法添加的可枚举属性</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><ol><li>for…in循环可以枚举(遍历)出对象本身具有的属性，通过Object.defineProperty()方法加的可枚举属性，或者通过原型对象绑定的可以枚举属性</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> pro </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> fn)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">pro</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/*输出*/</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//a</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//b</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//c</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>Object.keys()方法可以枚举<strong>实例</strong>对象本身的属性和通过Object.defineProperty()添加的可枚举属性，即不会枚举原型链上的属性</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#A6ACCD;">(fn))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">/*输出*/</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//[&#39;a&#39;,&#39;c&#39;]</span></span>
<span class="line"></span></code></pre></div><ol start="3"><li>JSON.stringify()方法只能序列化<strong>实例</strong>对象本身的属性和通过Object.defineProperty()添加的可枚举属性为JSON对象，即不会序化原型链上的属性</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(fn))</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//{&quot;a&quot;:&quot;我是对象本身就有的属性&quot;,&quot;c&quot;:&quot;我是通过Object.defineProperty方法添加的可枚举属性&quot;}</span></span>
<span class="line"></span></code></pre></div><h3 id="js的标准中是没有枚举这一说的-但在typescript中是有这个类型的" tabindex="-1">js的标准中是没有枚举这一说的,但在typescript中是有这个类型的 <a class="header-anchor" href="#js的标准中是没有枚举这一说的-但在typescript中是有这个类型的" aria-hidden="true">#</a></h3><p>枚举的意思是把所有相关的子数据，都收集起来。例如一个星期里的每一天:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Weekday</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        Monday</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        Tuseday</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        Wednesday</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        Thursday</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        Friday</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        Saturday</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        Sunday</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="proxy-vue3-的reactive" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer">Proxy</a> （Vue3 的reactive） <a class="header-anchor" href="#proxy-vue3-的reactive" aria-hidden="true">#</a></h2><p>Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）</p>`,41),p=[o];function t(r,c,i,y,D,F){return a(),n("div",null,p)}const d=s(l,[["render",t]]);export{C as __pageData,d as default};
